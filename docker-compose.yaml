version: "3"
services:
  ts:
    environment:
      - NODE_ENV=production
    build:
      context: .
      dockerfile: ./dockerfiles/ts.Dockerfile
    image: ts
    container_name: ts
    restart: always
    ports:
      - 3001:3001
    depends_on:
      - pg
      - es
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/hc || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
  go:
    environment:
      - GO_ENV=production
    build:
      context: .
      dockerfile: ./dockerfiles/go.Dockerfile
    image: go
    container_name: go
    restart: always
    ports:
      - 3001:3001
    depends_on:
      - pg
      - es
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/hc || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s
  pg:
    container_name: pg
    image: "postgres"
    env_file:
      - database.env
    volumes:
      - pg-data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 2s
      start_period: 5s
      retries: 5
  es:
    container_name: es
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 5s
      timeout: 2s
      start_period: 5s
      retries: 5
volumes:
  pg-data:
  elastic-data:
